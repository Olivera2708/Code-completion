[
    {
        "correct": "        start = prices[0]\n",
        "generated": "        for i in range(1, len(prices)):\n            if prices[i] > max:\n                max = prices[i]\n",
        "exact match": false,
        "chrf": 29.013859147965505,
        "levenshtein": 82,
        "token match": 0.3333333333333333,
        "runnable": true,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "\t\t\t\treturn False\n",
        "generated": "\t\t\t\treturn False\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correrct",
        "runnable_manual": true
    },
    {
        "correct": "\t\t\t\t\treturn prefix\n",
        "generated": "\t\t\t\tprefix += p\n\t\t\ti += 1\n\t\t\tprefix += p\n\t\t\tif i == len(strs[0]):\n\t\t\t\tretur",
        "exact match": false,
        "chrf": 36.41404483615416,
        "levenshtein": 61,
        "token match": 0.5,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "        }\n",
        "generated": "        }\n        result = []\n        for i in digits:\n            if i in keyboard:\n                result.append(keyboard[i])\n            else",
        "exact match": false,
        "chrf": 7.042253521126761,
        "levenshtein": 134,
        "token match": 1.0,
        "runnable": false,
        "label": "partial",
        "runnable_manual": true
    },
    {
        "correct": "            current = max(prev1, prev2 + num)\n",
        "generated": "            if num > prev1:\n                prev1 = num\n            if num > prev2:\n    ",
        "exact match": false,
        "chrf": 25.68582487367022,
        "levenshtein": 59,
        "token match": 0.16666666666666666,
        "runnable": true,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "        while len(to_visit) > 0 or len(next_visit) > 0:\n",
        "generated": "        while to_visit:\n            node = to_visit.popleft()\n            if node.left is not None:\n                next_visit",
        "exact match": false,
        "chrf": 39.95242473666216,
        "levenshtein": 90,
        "token match": 0.14285714285714285,
        "runnable": false,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "\t\tsett = set()\n",
        "generated": "\t",
        "exact match": false,
        "chrf": 0.0,
        "levenshtein": 14,
        "token match": 0.0,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "\t\t\tif (s[i] in map1 and map1[s[i]] != t[i]) or (s[i] not in map1 and t[i] in map2):\n",
        "generated": "\t\t\tif s[i] in map1:\n\t\t\t\tmap1[s[i]] = map1[s[i]] +",
        "exact match": false,
        "chrf": 34.607912182497905,
        "levenshtein": 46,
        "token match": 0.25,
        "runnable": false,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "        head.next = None\n",
        "generated": "        fast = head\n        previous = head\n        while fast is not None:\n    ",
        "exact match": false,
        "chrf": 22.529454303059552,
        "levenshtein": 59,
        "token match": 0.3333333333333333,
        "runnable": true,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "        current = self.root\n",
        "generated": "        current = self.root\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correrct",
        "runnable_manual": true
    },
    {
        "correct": "\t\t\tif (pattern[i] in map1 and map1[pattern[i]] != words[i]) or (pattern[i] not in map1 and words[i] in map2):\n",
        "generated": "\t\t\tif words[i] in map1:\n\t\t\t\tmap1[words[i]] = map1[words[i]] +",
        "exact match": false,
        "chrf": 30.990669499344264,
        "levenshtein": 65,
        "token match": 0.25,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "            if n/k < 1:\n",
        "generated": "            for i in range(k, n+1):\n                if i == 0:\n                    res.append(current)\n                else:\n                  ",
        "exact match": false,
        "chrf": 7.182612065451968,
        "levenshtein": 123,
        "token match": 0.25,
        "runnable": true,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "\t\t\t\tif abs(dict[nums[i]] - i) <= k:\n",
        "generated": "\t\t\t\treturn False\n\t\tfor i in range(len(nums)):\n\t\t\tif dict[nums[i]]!= i:\n",
        "exact match": false,
        "chrf": 41.448566283676676,
        "levenshtein": 52,
        "token match": 0.16666666666666666,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "\t\t\t\tif start != nums[i - 1]:\n",
        "generated": "\t\t\t\tres.append(f'{start}->{nums[i - 1]}')\n\t\t\telse:\n\t\t\t\tres.append(f'",
        "exact match": false,
        "chrf": 39.08424589735989,
        "levenshtein": 45,
        "token match": 0.16666666666666666,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": true
    },
    {
        "correct": "            left = helper(node.left)\n",
        "generated": "            left = helper(node.left)\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correrct",
        "runnable_manual": true
    },
    {
        "correct": "\t\t\tif nums[i - 1] != nums[i]:\n",
        "generated": "\t\t\t\tif nums[i] == nums[current]:\n\t\t\t\t\tnums[current] = nums[i]\n\t\t\t\t\tcurrent += 1\n\t\t",
        "exact match": false,
        "chrf": 44.86789160537388,
        "levenshtein": 57,
        "token match": 0.16666666666666666,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "\t\tremoved = 0\n",
        "generated": "\t\t\tremoved = 0\n\t\tfor i in range(n):\n\t\t\tif nums[i] == val:\n\t\t\t\tcounter = ",
        "exact match": false,
        "chrf": 45.847293197205936,
        "levenshtein": 58,
        "token match": 1.0,
        "runnable": false,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "\t\t\t\tj -= i\n",
        "generated": "\t\t\t\tj += 1\n\t\treturn -1\n\n# Time:  O(n)\n# Space: O(1)",
        "exact match": false,
        "chrf": 10.204081632653061,
        "levenshtein": 41,
        "token match": 0.3333333333333333,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "        for i in range(len(nums)):\n",
        "generated": "        for i in range(len(nums)):\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correrct",
        "runnable_manual": true
    },
    {
        "correct": "            odd.next = odd.next.next\n",
        "generated": "            if even.val == odd.val:\n    ",
        "exact match": false,
        "chrf": 15.470904889381334,
        "levenshtein": 21,
        "token match": 0.0,
        "runnable": true,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "        if len(nums) < 3:\n",
        "generated": "        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if not nums:\n",
        "exact match": false,
        "chrf": 15.24476346560107,
        "levenshtein": 79,
        "token match": 0.25,
        "runnable": true,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "            counter = 0\n",
        "generated": "            counter = 0\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correrct",
        "runnable_manual": true
    },
    {
        "correct": "        for char in s:\n",
        "generated": "        for char in s:\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correct",
        "runnable_manual": true
    },
    {
        "correct": "\t\tdict = {}\n",
        "generated": "\t",
        "exact match": false,
        "chrf": 0.0,
        "levenshtein": 11,
        "token match": 0.0,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "            return True\n",
        "generated": "            return True\n        while index_t < len(t):\n            if s[index_s] == t[index_t]:\n                inde",
        "exact match": false,
        "chrf": 43.18294820061689,
        "levenshtein": 93,
        "token match": 1.0,
        "runnable": false,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "        for c in s:\n",
        "generated": "        for c in s:\n            if c == \"(\":\n                stack.append((val, num))\n                val = \"\"\n                num = ",
        "exact match": false,
        "chrf": 39.29994774163003,
        "levenshtein": 113,
        "token match": 1.0,
        "runnable": false,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "                        cluster += 1\n",
        "generated": "                    visited.add(equation[0])\n",
        "exact match": false,
        "chrf": 6.621793344452387,
        "levenshtein": 22,
        "token match": 0.0,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": true
    },
    {
        "correct": "        intervals.sort(key=lambda x: x[1])\n",
        "generated": "        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n",
        "exact match": false,
        "chrf": 24.225558754248297,
        "levenshtein": 61,
        "token match": 0.0,
        "runnable": true,
        "label": "incorrect",
        "runnable_manual": true
    },
    {
        "correct": "        res += str(counter) if counter > 1 else \"\"\n",
        "generated": "        return res\n\n\nclass Solution:\n    def compress(self, chars):\n        res = \"\"\n        for i in range(len(chars))",
        "exact match": false,
        "chrf": 15.838474356815865,
        "levenshtein": 88,
        "token match": 0.2222222222222222,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "    def deleteNode(self, root, key):\n",
        "generated": "    def deleteNode(self, root, key):\n        if not root:\n            return None\n        if root.val < key:\n            root",
        "exact match": false,
        "chrf": 77.22989969678159,
        "levenshtein": 88,
        "token match": 1.0,
        "runnable": false,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "        current = points[0][1]\n",
        "generated": "        current = points[0][1]\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correct",
        "runnable_manual": true
    },
    {
        "correct": "        for num in nums:\n",
        "generated": "        for num in nums:\n",
        "exact match": true,
        "chrf": 100.0,
        "levenshtein": 0,
        "token match": 1.0,
        "runnable": true,
        "label": "correct",
        "runnable_manual": true
    },
    {
        "correct": "\t\t\t\treturn counter\n",
        "generated": "\t\t\t\tcounter += 1\n",
        "exact match": false,
        "chrf": 43.766452200332026,
        "levenshtein": 12,
        "token match": 0.5,
        "runnable": true,
        "label": "incorrect",
        "runnable_manual": true
    },
    {
        "correct": "\t\twhile x > 0:\n",
        "generated": "\t\t\twhile x > 0:\n\t\t\tnum *= x\n\t\t\tx -= num\n\t\t\tcounter += 1\n\t\treturn counter if ",
        "exact match": false,
        "chrf": 46.50424949788733,
        "levenshtein": 61,
        "token match": 1.0,
        "runnable": false,
        "label": "partial",
        "runnable_manual": false
    },
    {
        "correct": "        for i in range(m + 1):\n",
        "generated": "        for i in range(n + 1):\n",
        "exact match": false,
        "chrf": 75.48633555986498,
        "levenshtein": 1,
        "token match": 0.8333333333333334,
        "runnable": true,
        "label": "partial",
        "runnable_manual": true
    },
    {
        "correct": "\t\ti = 2\n",
        "generated": "\t",
        "exact match": false,
        "chrf": 0.0,
        "levenshtein": 7,
        "token match": 0.0,
        "runnable": false,
        "label": "incorrect",
        "runnable_manual": false
    },
    {
        "correct": "            if nums1[i] > nums2[j]:\n",
        "generated": "            if nums1[i] <= nums2[j]:\n                nums1[i], nums2[j] = nums2[j]",
        "exact match": false,
        "chrf": 60.4038652216567,
        "levenshtein": 47,
        "token match": 0.75,
        "runnable": false,
        "label": "partial",
        "runnable_manual": true
    }
]